name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      IMAGE_NAME: husnain844/crud_app-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and tag Docker image
        run: docker build -t $IMAGE_NAME:latest -f ./backend/crud_project/Dockerfile ./backend/crud_project

      - name: Push Docker image to Docker Hub
        run: docker push $IMAGE_NAME:latest

  deploy:
    name: Deploy to Kubernetes
    needs: build
    runs-on: ubuntu-latest

    env:
      KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up KinD Cluster
        run: |
          kind create cluster --config ./crud_app_k8s_config/kind-config.yaml --name crud-app-cluster

      - name: Apply ConfigMap
        run: |
          kubectl apply -f crud_app_k8s_config/app-config-configmap.yaml

      - name: Create MongoDB Secret
        run: |
          kubectl create secret generic mongo-secret \
            --from-literal=mongo-user="${{ secrets.MONGO_USER }}" \
            --from-literal=mongo-password="${{ secrets.MONGO_PASSWORD }}"

      - name: Deploy MongoDB
        run: |
          kubectl apply -f crud_app_k8s_config/crud-app-mongodb-deployment.yaml

      - name: Check MongoDB Pod Status
        run: |
          kubectl get pods

      - name: Wait for MongoDB Replica Set to stabilize
        run: sleep 20  # Increase the sleep time to 120 seconds

      - name: Check MongoDB Pod Status
        run: |
          kubectl get pods

      - name: Wait for MongoDB Replica Set to stabilize
        run: sleep 20  # Increase the sleep time to 120 seconds

      - name: Check MongoDB Pod Status
        run: |
          kubectl get pods

      - name: Wait for MongoDB Replica Set to stabilize
        run: sleep 20  # Increase the sleep time to 120 seconds

      - name: Check MongoDB Pod Status
        run: |
          kubectl get pods

#      - name: Wait for MongoDB Replica Set to stabilize
#        run: sleep 20  # Increase the sleep time to 120 seconds
#
#      - name: Check MongoDB Pod Status
#        run: |
#          kubectl get pods

      - name: Initialize MongoDB Replica Set
        run: |
          kubectl exec crud-app-mongodb-0 -- mongosh --eval 'rs.initiate({
            _id: "rs0",
            members: [
              { _id: 0, host: "crud-app-mongodb-0.mongo-service:27017", priority: 2 },
              { _id: 1, host: "crud-app-mongodb-1.mongo-service:27017", priority: 1 },
              { _id: 2, host: "crud-app-mongodb-2.mongo-service:27017", priority: 1 }
            ]
          }, {force:true})'

      - name: Wait for MongoDB Replica Set to stabilize
        run: sleep 20  # Adjust the sleep time as needed

      - name: check status of replica set
        run: |
          kubectl exec crud-app-mongodb-0 -- mongosh --eval 'rs.status()'

      - name: Debug MongoDB User Creation
        run: |
          echo "Mongo User: '${{ secrets.MONGO_USER }}'"
          echo "Mongo Password: '${{ secrets.MONGO_PASSWORD }}'"

      - name: Create MongoDB User
        run: |
            kubectl exec crud-app-mongodb-0 -- mongosh --eval "
            use admin;
            try {
              // Check if user already exists
              let userExists = db.getUser('${{ secrets.MONGO_USER }}');
              if (!userExists) {
                db.createUser({
                  user: '${{ secrets.MONGO_USER }}',
                  pwd: '${{ secrets.MONGO_PASSWORD }}',
                  roles: [
                    { role: 'readWrite', db: 'crud_app_db' },
                    { role: 'dbAdmin', db: 'crud_app_db' },
                    { role: 'userAdmin', db: 'crud_app_db' }
                  ]
                });
                print('User creation successful');
              } else {
                print('User already exists');
              }
            
              // Verify user creation
              let verifyUser = db.getUser('${{ secrets.MONGO_USER }}');
              if (verifyUser) {
                print('User verification successful');
                printjson(verifyUser.roles);
              } else {
                throw new Error('User verification failed');
              }
            } catch (e) {
              print('Operation failed: ' + e);
              quit(1);
            }"
      

      - name: Wait for MongoDB User creation stabilize
        run: sleep 10  # Adjust the sleep time as needed

      - name: Verify MongoDB Authentication
        run: |
          kubectl exec crud-app-mongodb-0 -- mongosh --eval "
          try {
          use admin;
          db.auth('${{ secrets.MONGO_USER }}', '${{ secrets.MONGO_PASSWORD }}');
          print('Authentication successful');
          } catch (e) {
          print('Authentication failed: ' + e);
          quit(1);
          }"
          
            # Add a verification step to check if authentication actually worked
      - name: Verify Database Access
        run: |
          kubectl exec crud-app-mongodb-0 -- mongosh --eval "
          try {
            use crud_app_db;
            db.runCommand({ connectionStatus: 1 });
            print('Database access verified');
          } catch (e) {
            print('Database access failed: ' + e);
            quit(1);
          }"

        # Add a step to check MongoDB logs for any authentication issues
      - name: Check MongoDB Logs
        run: |
          echo "MongoDB logs:"
          kubectl logs crud-app-mongodb-0

      - name: Debug MongoDB Configuration
        run: |
          echo "Checking MongoDB configuration..."
          
          # Check if MongoDB is running
          kubectl get pod crud-app-mongodb-0 -o wide
          
          # Check MongoDB status
          kubectl exec crud-app-mongodb-0 -- mongosh --eval "
          try {
            print('MongoDB server status:');
            printjson(db.serverStatus());
            
            print('\nReplica set status:');
            printjson(rs.status());
            
            print('\nAuthentication mechanism:');
            db.adminCommand( { getParameter: 1, authenticationMechanisms: 1 } );
          } catch (e) {
            print('Error getting MongoDB status: ' + e);
          }"
          
          # Check environment variables
          echo "Checking environment variables..."
          kubectl exec crud-app-mongodb-0 -- env | grep MONGO
          
          # Check MongoDB configuration file
          echo "Checking MongoDB configuration..."
          kubectl exec crud-app-mongodb-0 -- cat /etc/mongod.conf || echo "Config file not found at default location"
      
      - name: Wait for services to stabilize
        run: sleep 15  # Adjust time as needed

      - name: checking pods
        run: |
          kubectl get pods

      - name: Deploy Backend
        run: |
            kubectl apply -f crud_app_k8s_config/crud-app-backend-deployment.yaml

      - name: Check Backend Pod Status
        run: |
          kubectl get pods

      - name: Wait for Backend Replica Set to stabilize
        run: sleep 20  # Increase the sleep time to 120 seconds

      - name: Check Backend Pod Status
        run: |
          kubectl get pods

      - name: Wait for Backend Replica Set to stabilize
        run: sleep 20  # Increase the sleep time to 120 seconds

      - name: Check Backend Pod Status
        run: |
          kubectl get pods

      - name: Check Backend Pod Status
        run: |
          kubectl get pods

      - name: Check Backend Logs
        run: |
          # Check the logs after confirming all pods are running
          kubectl logs -l app=crud-app-backend

      - name: Wait for services to stabilize
        run: sleep 5  # Adjust time as needed

      - name: checking pods
        run: |
          kubectl get pods

      - name: Run Migrations
        run: |
          # Get the name of one running pod
          POD_NAME=$(kubectl get pods -l app=crud-app-backend -o jsonpath='{.items[?(@.status.phase=="Running")].metadata.name}' | head -n 1)

          echo "Running migrations on pod: $POD_NAME"
          # Run migrations on the selected pod
          kubectl exec $POD_NAME -- python manage.py migrate

#      - name: Generate SSL Certificate
#        run: |
#          openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout mykey.key -out mycert.crt -subj "/CN=ingress-nginx-admission/O=My Company"

      - name: Deploy Ingress Controller
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml

      - name: Wait for Ingress Controller to be ready
        run: |
            kubectl wait --namespace ingress-nginx \
              --for=condition=ready pod \
              --selector=app.kubernetes.io/component=controller \
              --timeout=300s

      - name: Configure Ingress
        run: |
          kubectl apply -f crud_app_k8s_config/ingress.yaml

      - name: Wait for Services to Stabilize
        run: |
            # You can wait specifically for your backend service to be ready
            kubectl wait --for=condition=ready pod -l app=crud-app-backend --timeout=300s

      - name: Get all resources
        run: |
          echo "Pods:"
          kubectl get pods -A
          echo "Services:"
          kubectl get services -A
          echo "Ingress:"
          kubectl get ingress -A

      - name: Wait for services to stabilize
        run: sleep 30  # Adjust time as needed

      - name: Test Backend Service directly
        run: |
          kubectl port-forward service/crud-app-backend-service 8000:8000 &
          sleep 5
          curl http://localhost:8000/api/healthcheck/
      

      - name: Test Ingress Setup
        run: |
            # Wait for ingress to get an IP
            until [ -n "$(kubectl get ingress crud-app-ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" ]; do
              echo "Waiting for ingress to get an IP..."
              sleep 5
            done
            
            # Get the ingress IP
            INGRESS_IP=$(kubectl get ingress crud-app-ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            
            # Test the healthcheck endpoint
            curl -H "Host: crud-app.local" http://$INGRESS_IP/api/healthcheck/

#name: CI/CD Pipeline
#
#on:
#  push:
#    branches:
#      - master
#
#jobs:
#  build:
#    name: Build and Push Docker Image
#    runs-on: ubuntu-latest
#
#    env:
#      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
#      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
#      IMAGE_NAME: husnain844/crud_app-backend
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up Docker
#        uses: docker/setup-buildx-action@v2
#
#      - name: Login to DockerHub
#        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
#
#      - name: Build and tag Docker image
#        run: docker build -t $IMAGE_NAME:latest -f ./backend/crud_project/Dockerfile ./backend/crud_project
#
#      - name: Push Docker image to Docker Hub
#        run: docker push $IMAGE_NAME:latest
#
#  deploy:
#    name: Deploy to Kubernetes
#    needs: build
#    runs-on: ubuntu-latest
#
#    env:
#      KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
#      MONGO_USER: ${{ secrets.MONGO_USER }}           # Injecting GitHub Secret for Mongo User
#      MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}   # Injecting GitHub Secret for Mongo Password
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up KinD Cluster
#        run: |
#          kind create cluster --config ./crud_app_k8s_config/kind-config.yaml --name crud-app-cluster
#
#      - name: Apply ConfigMap and Secrets
#        run: |
#          kubectl apply -f crud_app_k8s_config/app-config-configmap.yaml
#          kubectl apply -f crud_app_k8s_config/app-secret-secretmap.yaml
#
#      - name: Deploy MongoDB
#        run: |
#          kubectl apply -f crud_app_k8s_config/crud-app-mongodb-deployment.yaml
#
#      - name: Initialize MongoDB Replica Set
#        run: |
#          kubectl exec crud-app-mongodb-0 -- mongosh --eval 'rs.initiate({
#            _id: "rs0",
#            members: [
#              { _id: 0, host: "crud-app-mongodb-0.mongo-service:27017" },
#              { _id: 1, host: "crud-app-mongodb-1.mongo-service:27017" },
#              { _id: 2, host: "crud-app-mongodb-2.mongo-service:27017" }
#            ]
#          })'
#
#      - name: Wait for MongoDB Replica Set to stabilize
#        run: sleep 60  # Adjust the sleep time as needed
#
#      - name: Create MongoDB User
#        run: |
#          kubectl exec crud-app-mongodb-0 -- mongosh --eval "use admin;
#            db.createUser({
#              user: '${{ env.MONGO_USER }}',
#              pwd: '${{ env.MONGO_PASSWORD }}',
#              roles: [{ role: 'readWrite', db: 'crud_app_db' }]
#            });"
#
#      - name: Deploy Backend
#        run: |
#          kubectl apply -f crud_app_k8s_config/crud-app-backend-deployment.yaml
#
#      - name: Generate SSL Certificate
#        run: |
#          openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout mykey.key -out mycert.crt -subj "/CN=ingress-nginx-admission/O=My Company"
#
#      - name: Create SSL Certificate Secret
#        run: |
#          kubectl create secret tls ingress-tls --key mykey.key --cert mycert.crt
#
#      - name: Deploy Ingress Controller
#        run: |
#          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
#
#      - name: Configure Ingress
#        run: |
#          kubectl apply -f crud_app_k8s_config/ingress.yaml
#
#      - name: Test Ingress Setup
#        run: |
#          curl http://127.0.0.1/healthcheck
